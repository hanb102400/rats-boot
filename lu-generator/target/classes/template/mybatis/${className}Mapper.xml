<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<#include "global.ftl">
<mapper namespace="${@tpl.mapper.packageName}.${className}Mapper">
    <resultMap id="BaseResultMap" type="${@tpl.entity.packageName}.${className}">
<#if table.keyCount == 1 >
        <id column="${table.keyColumn.column}"  jdbcType="${table.keyColumn.jdbcType}" property="${table.keyColumn.field}"/>
</#if>
<#if table.keyCount != 1 >
<#list table.compKey.columns as column>
        <id column="${column.column}"  jdbcType="${column.jdbcType}" property="${column.field}"/>
</#list>
</#if>
<#list table.notKeyColumns as column>
        <result column="${column.column}" jdbcType="${column.jdbcType}" property="${column.field}" />
</#list>
    </resultMap>

    <sql id="Base_Column_List">
<@columnList/>
    </sql>

    <select id="selectByExample"  parameterType="${example}" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from ${table.tableName}
        <if test="_parameter != null" >
            <include refid="common.Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${r'${orderByClause}'}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="<@keyTypeFull/>" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from ${table.tableName}
        where <@whereSQL/>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="<@keyTypeFull/>" >
        delete from ${table.tableName}
        where <@whereSQL/>
    </delete>

    <delete id="deleteByExample" parameterType="${example}">
        delete from ${table.tableName}
        <if test="_parameter != null" >
            <include refid="common.Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="${@tpl.entity.packageName}.${className}">
        insert into ${table.tableName} (
          <@columnList/>
        ) values (
          <@columnParamList/>
        )
    </insert>

    <insert id="insertSelective" parameterType="${@tpl.entity.packageName}.${className}">
        insert into ${table.tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <@testColumnList/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <@testColumnParameList/>
        </trim>
    </insert>


    <update id="updateByExampleSelective" parameterType="map">
        update ${table.tableName}
        <set>
            <@set_updateByExampleSelective/>
        </set>
        <if test="_parameter != null">
            <include refid="common.Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update ${table.tableName}
        set
        <@set_updateByExample/>
        <if test="_parameter != null">
            <include refid="common.Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="${@tpl.entity.packageName}.${className}">
        update ${table.tableName}
        <set>
            <@setUpdateSQL/>
        </set>
        where <@whereSQL/>
    </update>

    <update id="updateByPrimaryKey" parameterType="${@tpl.entity.packageName}.${className}">
        update ${table.tableName}
        set
            <@set_updateByPrimaryKey/>
        where <@whereSQL/>
    </update>

    <select id="countByExample" parameterType="${example}" resultType="java.lang.Long">
        select count(*) from ${table.tableName}
        <if test="_parameter != null">
            <include refid="common.Example_Where_Clause" />
        </if>
    </select>

</mapper>


<#-- MapperXML函数=================== -->
<#-- columnList -->
<#macro columnList>
            <#list table.columns as column> ${column.column} <#if column_has_next>,</#if> </#list>
</#macro>

<#-- columnParamList -->
<#macro columnParamList>
            <#list table.columns as column> ${"#"}{${column.field}, jdbcType=${column.jdbcType}} <#if column_has_next>,</#if> </#list>
</#macro>

<#-- whereSQL -->
<#macro whereSQL>
<#if table.keyCount == 1 >
    ${table.keyColumn.column} = ${"#"}{${table.keyColumn.field} ,jdbcType=${table.keyColumn.jdbcType}}
</#if >
<#if table.keyCount != 1 >
<#list table.compKey.columns as column> ${column.column} = ${"#"}{${column.field} ,jdbcType=${column.jdbcType}} <#if column_has_next> and </#if> </#list>
</#if >
</#macro>

<#-- testColumnList -->
<#macro testColumnList>
<#list table.columns as column>
        <if test="${column.field} != null">
            ${column.column},
        </if>
</#list>
</#macro>

<#-- testColumnParamList -->
<#macro testColumnParameList>
<#list table.columns as column>
        <if test="${column.field} != null">
            ${"#"}{${column.field}, jdbcType=${column.jdbcType}} ,
        </if>
 </#list>
</#macro>


<#-- set_updateByExample -->
<#macro set_updateByExample>
<#list table.columns as column>
            ${column.column} = ${"#"}{record.${column.field}, jdbcType=${column.jdbcType}} ,
</#list>
</#macro>

<#-- updateByExampleSelective -->
<#macro set_updateByExampleSelective>
            <#list table.columns as column>
            <if test="record.${column.field} != null">
                ${column.column} = ${"#"}{record.${column.field}, jdbcType=${column.jdbcType}} ,
            </if>
            </#list>
</#macro>


<#-- set_updateByPrimaryKey -->
<#macro set_updateByPrimaryKey>
<#list table.columns as column>
            ${column.column} = ${"#"}{${column.field}, jdbcType=${column.jdbcType}} <#if column_has_next>,</#if>
</#list>
</#macro>


<#-- setUpdateSQL -->
<#macro setUpdateSQL>
            <#list table.notKeyColumns as column>
            <if test="${column.field} != null">
                ${column.column} =${"#"}{${column.field}, jdbcType=${column.jdbcType}} ,
            </if>
            </#list>
 </#macro>